소프트웨어 공학의 3R - 역공학, 재공학, 재사용
소트트웨어 3R의 필요성
 - 유지보수 효율성 향상 및 비용절감
 - 개발 생산성 향상
 - 소프트웨어 이해, 변경, 테스트 용이
 - 소프트웨어 변경 요구사항에 대한 신속한 대응
 - 소프트웨어 위기 극복

 역공학 (Reverse Engineering)
 - 기존 개발된 시스템을 CASE도구를 이용하여 사양서, 설계서 등의 문서로 추출하는 작업
 - 개발 단계를 역으로 올라가 기존 개발된 시스템의 코드나 데이터로부터 설계 명세서나 요구 분석서 등을 도출하는 작업
    특징
    - 상용화 되거나 기 개발된 소프트웨어의 분석을 도와줌
    - 기존 시스템의 자료와 정보를 설계수준에서 분석가능, 유지보수성 향상
    - 기존 시스템 정보 Repository에 보관, CASE 사용 용이
 재공학(Re-Engineering)
 - 기존 시스템을 널리 사용되는 프로그래밍 표준에 맞추거나, 고수준의 언어로 재구성, 이기종에서 사용할 수 있도록 변환하는 작업(리모델링)
    특징
    -유지보수성 향상
    -시스템의 이해와 변형 용이, 유지보수 비용 및 시간 절감
    -표준 준수 및 CASE의 사용 용이
재사용(Reuse)
- 이미 개발되어 그 기능,성능 및 품질을 인정받았던 소프트웨어의 전체 또는 일부 재사용
    특징
    - 소프트웨어 생산의 TCO(Total Cost Overhead)절감
    - 높은 품질의 소프트웨어 생산을 위한 공유 및 활용 효과
    범위
    - 함수와 객체 재사용
        :클래스나 함수단위로 구현한 소스코드를 재사용
    - 컴포넌트 재사용
    - 애플리케이션 재사용
    방법
    - 합성중심(Composiotion Based)
        :전자칩과 같은 소프트웨어 부픔, 즉 블록을 만들어서 끼워 맞추어 소프트웨어 완성
    - 생성중심(Generation Based)
        : 추상화 형태로 쓰여진 명세를 구체화하여 프로그램 생성

    소프트웨어 개발단계
        계획 > 요구사항 분석 > 설계 > 구현 > 테스트 > 유지보수 
    
    소프트웨어 개발 방법론
        구조적 방법론
        - 절차 지향 소프트웨어 개발 방법론
        - 제한된 구조에서 코드 생성 및 순차적 실행
            과정
            요구사항 분석 > 구조적 분석 > 구조적 설계 > 구조적 프로그래밍
            
            구성요소
            - 데이터 흐름도(DFD), 자료사전(DD), 상태전이도(STD),소단위 명세서(minispec)
애자일 방법론
변화에 유연하고 신속하게 대응 가능, 절차보다 사람이 중심
XP,LEAN,SCRUM이 있음
XP = 용단의피존
용 - 용기 , 단-단순성 , 의- 의사소통, 피-피드백, 존- 존중
SCRUM - 짧은주기 반복적 개발
백로그 - 요구사항
스프린트 - 2~4주 주기로 개발을 하는것
스크럼 미팅 - 매일 15분정도의 미팅으로 TO-DO LIST<< 기억
스크럼 마스터 - 프로젝트 리더, 문제가 생기면 인지 및 해결하는 역할
스프린트 회고 - 일정주기 혹은 스프린트 종료 시 문제사항 및 개선점을 기록
번 다운 차트 - 남아있는 백로그 대비 시간을 그래픽적으로 표현한 차트

린 - 도요타린의 품질기법을 적용하여 낭비 요소 제거
7가지 원칙 : 낭비 제거, 품질 내적화, 지식 창출, 늦은 확정, 빠른인도, 사람 존중, 전체 최적화

객체지향 - 클객메메인속
클래스, 객체, 메서드, 메세지, 인스턴스, 속성
객체지향 기법
캡슐화 -필요한 인터페이스만 밖으로, 결합도가 낮아지고 재사용도가 용이해짐